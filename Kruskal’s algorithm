#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#define INF 9999

int find(int parent[], int i) {
// Write your code here...
	if (parent[i]!=i)
		parent[i]=find(parent,parent[i]);
	return parent[i];
}


void union1(int parent[], int rank[], int x, int y) {
	int xroot = find(parent,x);
	int yroot = find(parent,y);

	if(rank[xroot]<rank[yroot])
		parent[xroot]=yroot;
	else if (rank[xroot]>rank[yroot])
		parent[yroot]=xroot;
	else {
		parent[yroot]=xroot;
		rank[xroot]++;
	}
	// Write your code here...
}


void kruskalMST(int **cost, int V) {
	int parent[V],rank[V];
	int edgeCount = 0, minCost = 0;

	for(int i = 0; i<V; i++){
		parent[i]=i;
		rank[i]=0;
	}


	while(edgeCount<V-1){
		int min = INF, u=-1,v=-1;

		for(int i = 0; i<V; i++){
			for(int j=0; j<V; j++){
				if (cost[i][j]<min && find(parent,i)!=find(parent,j)){
					min = cost[i][j];
					u=i;
					v=j;
				}
			}
		}
		if(u!=-1 && v!=-1){
			union1(parent,rank,u,v);
			printf("Edge %d:(%d, %d) cost:%d\n",edgeCount,u,v,min);
			minCost += min;
			edgeCount++;
			cost[u][v]=cost[v][u]= INF;
		}
	}
	printf("Minimum cost= %d\n",minCost);
}


int main() {
    int V;
    printf("No of vertices: ");
    scanf("%d", &V);

    int **cost = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++)
        cost[i] = (int *)malloc(V * sizeof(int));

    printf("Adjacency matrix:\n");
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &cost[i][j]);

    kruskalMST(cost, V);

    for (int i = 0; i < V; i++)
        free(cost[i]);
    free(cost);

    return 0;
}
